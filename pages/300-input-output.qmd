---
title: Input and Output
---

In this section we'll be looking at the functionality that Biopython provides for reading and writing files. This is all handled by the `Bio.SeqIO` module so let's start by importing it:


```{python}
from Bio import SeqIO
```

### Files for this section

For this section you need to download some files which we will be reading in. You can either download them by hand from using these links: [V01408.1.fasta](https://bristol-training.github.io/introduction-to-biopython/data/V01408.1.fasta), [ls_orchid_short.gbk](https://bristol-training.github.io/introduction-to-biopython/data/ls_orchid_short.fasta) and [ls_orchid.gbk](https://bristol-training.github.io/introduction-to-biopython/data/ls_orchid.gbk) or run the following Python code:


```python
import urllib
for f in ["V01408.1.fasta", "ls_orchid_short.fasta", "ls_orchid.gbk"]:
    urllib.request.urlretrieve(f"https://bristol-training.github.io/introduction-to-biopython/data/{f}", f)
```

## `SeqRecord` objects

If you have a FASTA file with a single sequence in it, the simplest way to read it in is with `SeqIO.read`. This takes two arguments, the name of the file you want to open, and the format that file is in.


::: {#keypointsN .callout-tip icon=false title='FASTA file format'}

FASTA files can contain multiple sequences, each begining with a description line, starting with a ">" symbol.

```
>Sequence1
ATCGATCGATCGATCGACTGACTAGCTAACG
CAGTCAGTCAGTCAGTCAGTCAGTCAGTCAG
AGTCAGTCAGTCAGTCAGTCAGT

>Sequence2
ACTGACTAGCTAACGCAGTCAGTCAGTCAGT
CAGTCAGTCAGTCAGTCAGAGTCAGTCAGTC
AGTCAGTCAGTCATCGATCGATCGATCGACT
```
:::

```{python}
tm = SeqIO.read("V01408.1.fasta", "fasta")
print(tm)
```


The `read` functions returns an object called a `SeqRecord`. These are like the `Seq`s that we saw before but have additional information associated with them. A full list of these are:

<dl>
<dt>`.seq`</dt>
The sequence itself, typically a `Seq` object as we saw in the last chapter.
    
<dt>`.id`</dt>
The primary ID used to identify the sequence.

<dt>`.name`</dt>
A "common" name/id for the sequence. In some cases this will be the same as the ID, but it could also be a clone name.

<dt>`.description`</dt>
A human readable description or expressive name for the sequence.

<dt>`.letter_annotations`</dt>
Holds per-letter-annotations using a (restricted) dictionary of additional information about the letters in the sequence.
The keys are the name of the information, and the information is contained in the value as a Python sequence (i.e. a list, tuple or string) with the same length as the sequence itself.
This is often used for quality scores or secondary structure information (e.g. from alignment files).
    

<dt>`.annotations`</dt>
A dictionary of additional information about the sequence.
The keys are the name of the information, and the information is contained in the value.
This allows the addition of more "unstructured" information to the sequence.
    

<dt>`.features`</dt>
A list of `SeqFeature` objects with more structured information about the features on a sequence (e.g. position of genes on a genome, or domains on a protein sequence).
    
<dt>`.dbxrefs`</dt>
A list of database cross-references as strings.
</dl>

So you can get the `Seq` object fom inside the record with:


```{python}
tm.seq
```



::: {#exampleN .callout-note icon=false title='Exercise'}
Have a look at the value of some of these attributes of the `tm` object. Which are available and which are missing or empty?
:::

::: {#answerN .callout-caution icon=false title='Answer' collapse="true"}

```{python}
tm.seq
```
```{python}
tm.id
```
```{python}
tm.name
```
```{python}
tm.description
```
```{python}
tm.letter_annotations
```
```{python}
tm.annotations
```
```{python}
tm.features
```
```{python}
tm.dbxrefs
```
:::


## Reading in multiple sequences

It is very common to have files which contain multiple sequences. Biopython provides an interface to read these in, one after another which is the `SeqIO.parse` function. This provides you with an object which you can loop over with a `for` loop:


```{python}
for record in SeqIO.parse("ls_orchid_short.fasta", "fasta"):
    print(record.description)
```


Each time around the loop, you are given a `SeqRecord` object which will work in exactly the same way as in the previous section, so getting the `.description` works fine.

::: {#exampleN .callout-note icon=false title='Exercise'}
Load in the `ls_orchid_short.fasta` file and print out the length of each sequence, along with its description.
:::

::: {#answerN .callout-caution icon=false title='Answer' collapse="true"}
```{python}
for record in SeqIO.parse("ls_orchid_short.fasta", "fasta"):
    print(len(record.seq), " -", record.description)
```
:::

The type of the object returned by `SeqIO.parse` is known as a *generator*. One of the features of a generator in Python is that you can only loop over them once before they are *exhausted*. For example you can loop over them once without issue:


```{python}
records = SeqIO.parse("ls_orchid_short.fasta", "fasta")
print([r.id for r in records])
```



But if you try to use the same object again, you will see that you get nothing back:


```{python}
print([r.id for r in records])
```


The reason for this is that it allows you to access, one at a time, a very long list of sequences, potentially more than can fit in memory at once since it only loads them one at a time.

If you know you have a short set of sequences (as we have in this tutorial) then you can load them all into a Python list and access them however you wish:


```{python}
records = list(SeqIO.parse("ls_orchid_short.fasta", "fasta"))
print([r.id for r in records])
```




```{python}
print([r.id for r in records])
```



## Genbank files

As well as FASTA files, Biopython can read GenBank files. All you need to do is specify the filetype when calling the `SeqIO.parse` function. If you pass `"genbank"` (or `"gb"`) as the second argument then it will read it as a GenBankfile:


```{python}
record_iterator = SeqIO.parse("ls_orchid.gbk", "genbank")
```

If you are loading a file with multiple sequences in, you can grab just the first one with Python's [`next`](https://docs.python.org/3/library/functions.html#next) function. This gives you whatever would be available the first time around the loop:


```{python}
first_record = next(record_iterator)
```

GenBank files usually contain a lot more information than a FASTA so more of the fields of the `SeqRecord` will be filled in. This means that we can, for example, see the annotations that the sequecne has:


```{python}
first_record.annotations
```



::: {#exampleN .callout-note icon=false title='Exercise'}
Take a look at the record and see what other `SeqRecord` attributes are filled in which were missing from the FASTA file we loaded earlier.
:::

::: {#answerN .callout-caution icon=false title='Answer' collapse="true"}
```{python}
first_record.seq
```
```{python}
first_record.id
```
```{python}
first_record.name
```
```{python}
first_record.description
```
```{python}
first_record.letter_annotations
```
```{python}
first_record.annotations
```
```{python}
first_record.features
```
```{python}
first_record.dbxrefs
```
:::

We’ve talked about using `Bio.SeqIO.parse` for sequence input (reading files), and now we’ll look at `Bio.SeqIO.write` which is for sequence output (writing files). This is a function taking three arguments: some `SeqRecord` objects, a handle or filename to write to, and a sequence format.

Here is an example, where we start by creating a few `SeqRecord` objects the hard way (by hand, rather than by loading them from a file):


```{python}
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord

rec1 = SeqRecord(
    Seq(
        "MMYQQGCFAGGTVLRLAKDLAENNRGARVLVVCSEITAVTFRGPSETHLDSMVGQALFGD"
        "GAGAVIVGSDPDLSVERPLYELVWTGATLLPDSEGAIDGHLREVGLTFHLLKDVPGLISK"
        "NIEKSLKEAFTPLGISDWNSTFWIAHPGGPAILDQVEAKLGLKEEKMRATREVLSEYGNM"
        "SSAC",
    ),
    id="gi|14150838|gb|AAK54648.1|AF376133_1",
    description="chalcone synthase [Cucumis sativus]",
)

rec2 = SeqRecord(
    Seq(
        "YPDYYFRITNREHKAELKEKFQRMCDKSMIKKRYMYLTEEILKENPSMCEYMAPSLDARQ"
        "DMVVVEIPKLGKEAAVKAIKEWGQ",
    ),
    id="gi|13919613|gb|AAK33142.1|",
    description="chalcone synthase [Fragaria vesca subsp. bracteata]",
)

my_records = [rec1, rec2]
```

Now we have a list of `SeqRecord` objects, we’ll write them to a FASTA format file:


```{python}
SeqIO.write(my_records, "my_example.faa", "fasta")
```

The `2` that gets returned tells you how many records were written.


::: {#exampleN .callout-note icon=false title='Exercise'}
Create one `SeqRecord` by hand and write it to a `.gbk` file. Then read that file in and check that the details match.
:::

