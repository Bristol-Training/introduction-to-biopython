---
title: Introduction
---


Biopython is a suite of tools for doing computational molecular biology in Python. It has lots of features needed for this kind of work, including:

- Standard operations on sequences such as transcription, complements and conversions.
- Reading and writing many common file formats such as FASTA, GenBank and Blast.
- Querying many online databases such as NCBI.

In this course we wil introduce some of the basics of Biopython and how it can support you in your workflows. It will focus on Biopython as a tool to do your job and less on the specifics of bioinformatics as a research field.

For the purpose of this course we will be using a free tool called JupyterLab which provides you with a local editor and Python terminal in your web browser. Setting up instructions can be found [here]("pages/001-workspace-setup.qmd").


### Intended learning outcomes

By the end of this course, you will:

- Know how to use Biopython
- Be familiar with reading sequencing files
- Know how to perform simple operations with sequences and alignments
- Be able to query online databases such as NCBI




## How to read this documentation

In this documentation, any time that we are seeing a small snippet of Python code, we'll see it written in a grey box like the following:

```{.python}
print("Hello, Python")
```

If the commands are executed by the machine we will see the output of them below enclosed on a vertical purple line:

```{python}
print("Hello, Python!")
```

By contrast, you will see larger peces of code as scripts with a given name, e.g. `script.py`, in a code block with darker header:

```{.python filename="script.py"}
greeting = "Hello"
name = input("What is your name? ")
print(greeting, name)
```

We may ask you to run a script using the `Command Prompt` (Windows) or `Terminal` (Mac and Linux). We will show you what commands to run and will look like this:
```{.bash filename="Terminal/Command Prompt"}
python script.py
```

**Please note that sometimes we will skip showing the execution of scripts on the Terminal/Command Prompt box, but we will assume you to run the script on your.**

In some cases we will introduce general programming concepts and structures using pseudocode, a high-level, easy-to-read syntax close to natural language. This should not be confused with Python code and cannot be executed on your machine, but it is useful to describe how your code should behave. Here there is an example:
```
FOR EACH sample IN my_study
    IF (sample.value > 100)
        DO SOMETHING
    OTHERWISE
        DO SOMETHING ELSE
```


There are some exercises along this course, and it is important you try to answer them yourself to understand how Python works. Exercises are shown in blue boxes followed by a yellow box that contains the answer of each exercise. We recommend you to try to answer each exercise yourself before looking at the solution. 

::: {#exampleN .callout-note icon=false title='Exercise'}
This is an exercise. You will need to click in the below box to see the answer.
:::

::: {#answerN .callout-caution icon=false title='Answer (click to open)' collapse="true"}
This is the answer.
:::

Last, we will highlight important points using green boxes like this one:

::: {#keypointsN .callout-tip icon=false title='Key points'}
These are important concepts and technical notes.
:::


